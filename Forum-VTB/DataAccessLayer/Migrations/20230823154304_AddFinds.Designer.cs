// <auto-generated />
using System;
using DataAccessLayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DataAccessLayer.Migrations
{
    [DbContext(typeof(ForumVTBDbContext))]
    [Migration("20230823154304_AddFinds")]
    partial class AddFinds
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DataAccessLayer.Models.Advert", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateOfCreation")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(3000)
                        .HasColumnType("character varying(3000)");

                    b.Property<string>("MainPhoto")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)");

                    b.Property<string>("Price")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<int?>("SubsectionId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SubsectionId");

                    b.HasIndex("UserId");

                    b.ToTable("Adverts", (string)null);
                });

            modelBuilder.Entity("DataAccessLayer.Models.AdvertComment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AdvertId")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateOfCreation")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ParentCommentId")
                        .HasColumnType("text");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AdvertId");

                    b.HasIndex("ParentCommentId");

                    b.HasIndex("UserId");

                    b.ToTable("AdvertComments", (string)null);
                });

            modelBuilder.Entity("DataAccessLayer.Models.AdvertFavourite", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AdvertId")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AdvertId");

                    b.HasIndex("UserId", "AdvertId")
                        .IsUnique();

                    b.ToTable("AdvertFavourites", (string)null);
                });

            modelBuilder.Entity("DataAccessLayer.Models.AdvertFile", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AdvertId")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateOfCreation")
                        .HasColumnType("timestamp");

                    b.Property<string>("FileURL")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AdvertId");

                    b.ToTable("AdvertFiles", (string)null);
                });

            modelBuilder.Entity("DataAccessLayer.Models.Chapter", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int?>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Chapters", (string)null);
                });

            modelBuilder.Entity("DataAccessLayer.Models.Event", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<string>("OtherInfo")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Poster")
                        .HasColumnType("text");

                    b.Property<int?>("SubsectionId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("SubsectionId");

                    b.ToTable("Events", (string)null);
                });

            modelBuilder.Entity("DataAccessLayer.Models.Find", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateOfCreation")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(3000)
                        .HasColumnType("character varying(3000)");

                    b.Property<string>("MainPhoto")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<int?>("SubsectionId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SubsectionId");

                    b.HasIndex("UserId");

                    b.ToTable("Finds", (string)null);
                });

            modelBuilder.Entity("DataAccessLayer.Models.FindComment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateOfCreation")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FindId")
                        .HasColumnType("text");

                    b.Property<string>("ParentCommentId")
                        .HasColumnType("text");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FindId");

                    b.HasIndex("ParentCommentId");

                    b.HasIndex("UserId");

                    b.ToTable("FindComments", (string)null);
                });

            modelBuilder.Entity("DataAccessLayer.Models.FindFavourite", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("FindId")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FindId");

                    b.HasIndex("UserId", "FindId")
                        .IsUnique();

                    b.ToTable("FindFavourites", (string)null);
                });

            modelBuilder.Entity("DataAccessLayer.Models.FindFile", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateOfCreation")
                        .HasColumnType("timestamp");

                    b.Property<string>("FileURL")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FindId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FindId");

                    b.ToTable("FindFiles", (string)null);
                });

            modelBuilder.Entity("DataAccessLayer.Models.Job", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateOfCreation")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(3000)
                        .HasColumnType("character varying(3000)");

                    b.Property<string>("MainPhoto")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)");

                    b.Property<string>("Price")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<int?>("SubsectionId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SubsectionId");

                    b.HasIndex("UserId");

                    b.ToTable("Jobs", (string)null);
                });

            modelBuilder.Entity("DataAccessLayer.Models.JobFavourite", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("JobId")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.HasIndex("UserId", "JobId")
                        .IsUnique();

                    b.ToTable("JobFavourites", (string)null);
                });

            modelBuilder.Entity("DataAccessLayer.Models.JobFile", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateOfCreation")
                        .HasColumnType("timestamp");

                    b.Property<string>("FileURL")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("JobId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.ToTable("JobFiles", (string)null);
                });

            modelBuilder.Entity("DataAccessLayer.Models.MessageFile", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("FileURL")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("MessageId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MessageId");

                    b.ToTable("MessageFiles", (string)null);
                });

            modelBuilder.Entity("DataAccessLayer.Models.Section", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ChapterId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.HasKey("Id");

                    b.HasIndex("ChapterId");

                    b.ToTable("Sections", (string)null);
                });

            modelBuilder.Entity("DataAccessLayer.Models.Subsection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<int>("SectionId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SectionId");

                    b.ToTable("Subsections", (string)null);
                });

            modelBuilder.Entity("DataAccessLayer.Models.UserChat", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AdvertId")
                        .HasColumnType("text");

                    b.Property<string>("FirstUserId")
                        .HasColumnType("text");

                    b.Property<string>("SecondUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AdvertId");

                    b.HasIndex("FirstUserId");

                    b.HasIndex("SecondUserId");

                    b.ToTable("UserChats", (string)null);
                });

            modelBuilder.Entity("DataAccessLayer.Models.UserMessage", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ChatId")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateOfCreation")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ParentMessageId")
                        .HasColumnType("text");

                    b.Property<string>("ReceiverId")
                        .HasColumnType("text");

                    b.Property<string>("SenderId")
                        .HasColumnType("text");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("ParentMessageId");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("UserMessages", (string)null);
                });

            modelBuilder.Entity("DataAccessLayer.Models.UserProfile", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp");

                    b.Property<long?>("ChatId")
                        .HasColumnType("bigint");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NickName")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("Photo")
                        .HasColumnType("text");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("DataAccessLayer.Models.UserTheme", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Theme")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserThemes", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DataAccessLayer.Models.Advert", b =>
                {
                    b.HasOne("DataAccessLayer.Models.Subsection", "Subsection")
                        .WithMany("Adverts")
                        .HasForeignKey("SubsectionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataAccessLayer.Models.UserProfile", "User")
                        .WithMany("Adverts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Subsection");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccessLayer.Models.AdvertComment", b =>
                {
                    b.HasOne("DataAccessLayer.Models.Advert", "Advert")
                        .WithMany("AdvertComments")
                        .HasForeignKey("AdvertId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataAccessLayer.Models.AdvertComment", "ParentComment")
                        .WithMany("Replies")
                        .HasForeignKey("ParentCommentId");

                    b.HasOne("DataAccessLayer.Models.UserProfile", "UserProfile")
                        .WithMany("AdvertComments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Advert");

                    b.Navigation("ParentComment");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("DataAccessLayer.Models.AdvertFavourite", b =>
                {
                    b.HasOne("DataAccessLayer.Models.Advert", "Advert")
                        .WithMany("Favourites")
                        .HasForeignKey("AdvertId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataAccessLayer.Models.UserProfile", "User")
                        .WithMany("AdvertFavourites")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Advert");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccessLayer.Models.AdvertFile", b =>
                {
                    b.HasOne("DataAccessLayer.Models.Advert", "Advert")
                        .WithMany("Files")
                        .HasForeignKey("AdvertId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Advert");
                });

            modelBuilder.Entity("DataAccessLayer.Models.Event", b =>
                {
                    b.HasOne("DataAccessLayer.Models.Subsection", "Subsection")
                        .WithMany("Events")
                        .HasForeignKey("SubsectionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Subsection");
                });

            modelBuilder.Entity("DataAccessLayer.Models.Find", b =>
                {
                    b.HasOne("DataAccessLayer.Models.Subsection", "Subsection")
                        .WithMany("Finds")
                        .HasForeignKey("SubsectionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataAccessLayer.Models.UserProfile", "User")
                        .WithMany("Finds")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Subsection");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccessLayer.Models.FindComment", b =>
                {
                    b.HasOne("DataAccessLayer.Models.Find", "Find")
                        .WithMany("FindComments")
                        .HasForeignKey("FindId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataAccessLayer.Models.FindComment", "ParentComment")
                        .WithMany("Replies")
                        .HasForeignKey("ParentCommentId");

                    b.HasOne("DataAccessLayer.Models.UserProfile", "UserProfile")
                        .WithMany("FindComments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Find");

                    b.Navigation("ParentComment");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("DataAccessLayer.Models.FindFavourite", b =>
                {
                    b.HasOne("DataAccessLayer.Models.Find", "Find")
                        .WithMany("Favourites")
                        .HasForeignKey("FindId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataAccessLayer.Models.UserProfile", "User")
                        .WithMany("FindFavourites")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Find");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccessLayer.Models.FindFile", b =>
                {
                    b.HasOne("DataAccessLayer.Models.Find", "Find")
                        .WithMany("Files")
                        .HasForeignKey("FindId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Find");
                });

            modelBuilder.Entity("DataAccessLayer.Models.Job", b =>
                {
                    b.HasOne("DataAccessLayer.Models.Subsection", "Subsection")
                        .WithMany("Jobs")
                        .HasForeignKey("SubsectionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataAccessLayer.Models.UserProfile", "User")
                        .WithMany("Jobs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Subsection");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccessLayer.Models.JobFavourite", b =>
                {
                    b.HasOne("DataAccessLayer.Models.Job", "Job")
                        .WithMany("Favourites")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataAccessLayer.Models.UserProfile", "User")
                        .WithMany("JobFavourites")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Job");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccessLayer.Models.JobFile", b =>
                {
                    b.HasOne("DataAccessLayer.Models.Job", "Job")
                        .WithMany("Files")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Job");
                });

            modelBuilder.Entity("DataAccessLayer.Models.MessageFile", b =>
                {
                    b.HasOne("DataAccessLayer.Models.UserMessage", "UserMessage")
                        .WithMany("Files")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("UserMessage");
                });

            modelBuilder.Entity("DataAccessLayer.Models.Section", b =>
                {
                    b.HasOne("DataAccessLayer.Models.Chapter", "Chapter")
                        .WithMany("Sections")
                        .HasForeignKey("ChapterId");

                    b.Navigation("Chapter");
                });

            modelBuilder.Entity("DataAccessLayer.Models.Subsection", b =>
                {
                    b.HasOne("DataAccessLayer.Models.Section", "Section")
                        .WithMany("Subsections")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Section");
                });

            modelBuilder.Entity("DataAccessLayer.Models.UserChat", b =>
                {
                    b.HasOne("DataAccessLayer.Models.Advert", "Advert")
                        .WithMany("Chats")
                        .HasForeignKey("AdvertId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataAccessLayer.Models.UserProfile", "FirstUser")
                        .WithMany("ChatsAsFirstUser")
                        .HasForeignKey("FirstUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataAccessLayer.Models.UserProfile", "SecondUser")
                        .WithMany("ChatsAsSecondUser")
                        .HasForeignKey("SecondUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Advert");

                    b.Navigation("FirstUser");

                    b.Navigation("SecondUser");
                });

            modelBuilder.Entity("DataAccessLayer.Models.UserMessage", b =>
                {
                    b.HasOne("DataAccessLayer.Models.UserChat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("DataAccessLayer.Models.UserMessage", "ParentMessage")
                        .WithMany()
                        .HasForeignKey("ParentMessageId");

                    b.HasOne("DataAccessLayer.Models.UserProfile", "Receiver")
                        .WithMany("ReceivedMessages")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataAccessLayer.Models.UserProfile", "Sender")
                        .WithMany("SentMessages")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Chat");

                    b.Navigation("ParentMessage");

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("DataAccessLayer.Models.UserTheme", b =>
                {
                    b.HasOne("DataAccessLayer.Models.UserProfile", "User")
                        .WithOne("Theme")
                        .HasForeignKey("DataAccessLayer.Models.UserTheme", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DataAccessLayer.Models.UserProfile", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DataAccessLayer.Models.UserProfile", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Models.UserProfile", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DataAccessLayer.Models.UserProfile", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccessLayer.Models.Advert", b =>
                {
                    b.Navigation("AdvertComments");

                    b.Navigation("Chats");

                    b.Navigation("Favourites");

                    b.Navigation("Files");
                });

            modelBuilder.Entity("DataAccessLayer.Models.AdvertComment", b =>
                {
                    b.Navigation("Replies");
                });

            modelBuilder.Entity("DataAccessLayer.Models.Chapter", b =>
                {
                    b.Navigation("Sections");
                });

            modelBuilder.Entity("DataAccessLayer.Models.Find", b =>
                {
                    b.Navigation("Favourites");

                    b.Navigation("Files");

                    b.Navigation("FindComments");
                });

            modelBuilder.Entity("DataAccessLayer.Models.FindComment", b =>
                {
                    b.Navigation("Replies");
                });

            modelBuilder.Entity("DataAccessLayer.Models.Job", b =>
                {
                    b.Navigation("Favourites");

                    b.Navigation("Files");
                });

            modelBuilder.Entity("DataAccessLayer.Models.Section", b =>
                {
                    b.Navigation("Subsections");
                });

            modelBuilder.Entity("DataAccessLayer.Models.Subsection", b =>
                {
                    b.Navigation("Adverts");

                    b.Navigation("Events");

                    b.Navigation("Finds");

                    b.Navigation("Jobs");
                });

            modelBuilder.Entity("DataAccessLayer.Models.UserChat", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("DataAccessLayer.Models.UserMessage", b =>
                {
                    b.Navigation("Files");
                });

            modelBuilder.Entity("DataAccessLayer.Models.UserProfile", b =>
                {
                    b.Navigation("AdvertComments");

                    b.Navigation("AdvertFavourites");

                    b.Navigation("Adverts");

                    b.Navigation("ChatsAsFirstUser");

                    b.Navigation("ChatsAsSecondUser");

                    b.Navigation("FindComments");

                    b.Navigation("FindFavourites");

                    b.Navigation("Finds");

                    b.Navigation("JobFavourites");

                    b.Navigation("Jobs");

                    b.Navigation("ReceivedMessages");

                    b.Navigation("SentMessages");

                    b.Navigation("Theme");
                });
#pragma warning restore 612, 618
        }
    }
}
